package main

import (
	//"fmt"
	"html/template"
	//"io/ioutil"
	"net/http"
	"regexp"
)

var templates = template.Must(template.ParseFiles("button.html", "count.html"))
var validPath = regexp.MustCompile("^/(button|save|count)/(.*)")

type Page struct{
  Title string
	PostList []Post
}



func loadPage(title string) (*Page, error) {
    return &Page{Title: title, PostList: myPostList}, nil
}

func makeHandler(fn func (http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
        m := validPath.FindStringSubmatch(r.URL.Path)
        if m == nil {
            http.NotFound(w, r)
            return
        }
        fn(w, r, m[2])
    }
}

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
    err := templates.ExecuteTemplate(w, tmpl+".html", p)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
    }
}

func buttonHandler(w http.ResponseWriter, r *http.Request) {
    renderTemplate(w, "button", &Page{Title: "Button", PostList: myPostList})
}

func countHandler(w http.ResponseWriter, r *http.Request) {
    renderTemplate(w, "count", &Page{Title: "Count", PostList: myPostList})
}

func saveHandler(w http.ResponseWriter, r *http.Request, num string) {
    body := r.FormValue("postValue")
		bodyByte = []byte(body)
		//dispatch("NEW_POST", &bodyByte, w, r)
		myPostList = append(myPostList, Post{Num: num, Body: bodyByte})
    http.Redirect(w, r, "/button/", http.StatusFound)
}



func main(){
	http.HandleFunc("/button/", buttonHandler)
	http.HandleFunc("/count/", countHandler)
	http.HandleFunc("/save/", makeHandler(saveHandler))

	http.ListenAndServe(":8080", nil)

}
